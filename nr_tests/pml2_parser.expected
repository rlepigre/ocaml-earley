[@@@ocaml.text
  " Main parsing module. This module defines an [Earley] parser for the\n    language. "]
open Earley_core
open Earley
open Extra
open Pos
open Output
open Bindlib
open Typing
open Raw
open Priority
exception No_parse of pos
  [@ocaml.doc " Exception raised in case of parse error. "]
exception Check_failed of Ast.prop * bool * Ast.prop 
let verbose = ref true
let timed = ref false
let recompile = ref false
let parsing_chrono = Chrono.create "parsing"
let single_line _loc = if _loc.start_line <> _loc.end_line then give_up ()
let str_lit =
  let normal = List.fold_left Charset.del Charset.full ['\\'; '"'; '\r'] in
  let normal = in_charset normal in
  let str_char =
    Earley_core.Earley.alternatives
      (List.cons
         (Earley_core.Earley.fsequence normal
            (Earley_core.Earley.empty (fun c -> String.make 1 c)))
         (List.cons
            (Earley_core.Earley.fsequence_ignore
               (Earley_core.Earley.string "\\\"" "\\\"")
               (Earley_core.Earley.empty "\""))
            (List.cons
               (Earley_core.Earley.fsequence_ignore
                  (Earley_core.Earley.string "\\\\" "\\\\")
                  (Earley_core.Earley.empty "\\"))
               (List.cons
                  (Earley_core.Earley.fsequence_ignore
                     (Earley_core.Earley.string "\\n" "\\n")
                     (Earley_core.Earley.empty "\n"))
                  (List.cons
                     (Earley_core.Earley.fsequence_ignore
                        (Earley_core.Earley.string "\\t" "\\t")
                        (Earley_core.Earley.empty "\t")) []))))) in
  let str =
    Earley_core.Earley.fsequence_ignore (Earley_core.Earley.string "\"" "\"")
      (Earley_core.Earley.fsequence
         (Earley_core.Earley.apply (fun f -> f [])
            (Earley_core.Earley.fixpoint' (fun l -> l) str_char
               (fun x -> fun f -> fun l -> f (List.cons x l))))
         (Earley_core.Earley.fsequence_ignore
            (Earley_core.Earley.string "\"" "\"")
            (Earley_core.Earley.empty (fun cs -> String.concat "" cs)))) in
  change_layout str no_blank
let path_atom = Earley_core.Earley.declare_grammar "path_atom"
let _ =
  Earley_core.Earley.set_grammar path_atom
    (Earley_str.regexp ~name:"[a-zA-Z0-9_]+" "[a-zA-Z0-9_]+"
       (fun group -> group 0))
let no_dot =
  Earley.test ~name:"no_dot" Charset.full
    (fun buf ->
       fun pos ->
         let (c, buf, pos) = Input.read buf pos in
         if c <> '.' then ((), true) else ((), false))
let path = Earley_core.Earley.declare_grammar "path"
let _ =
  Earley_core.Earley.set_grammar path
    (Earley_core.Earley.fsequence
       (Earley_core.Earley.apply (fun f -> f [])
          (Earley_core.Earley.fixpoint' (fun l -> l)
             (Earley_core.Earley.fsequence path_atom
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.char '.' '.')
                   (Earley_core.Earley.empty (fun _default_0 -> _default_0))))
             (fun x -> fun f -> fun l -> f (List.cons x l))))
       (Earley_core.Earley.fsequence path_atom
          (Earley_core.Earley.fsequence no_dot
             (Earley_core.Earley.empty
                (fun _default_0 -> fun f -> fun ps -> ps @ [f])))))
let goal_name = Earley_core.Earley.declare_grammar "goal_name"
let _ =
  Earley_core.Earley.set_grammar goal_name
    (Earley_str.regexp ~name:"\\\\([^-]\\\\|\\\\(-[^}]\\\\)\\\\)*"
       "\\([^-]\\|\\(-[^}]\\)\\)*" (fun group -> group 0))
let goal = Earley_core.Earley.declare_grammar "goal"
let _ =
  Earley_core.Earley.set_grammar goal
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "{-" "{-")
       (Earley_core.Earley.fsequence goal_name
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "-}" "-}")
             (Earley_core.Earley.empty (fun str -> String.trim str)))))
let _assert_ = Keyword.create "assert"
let _assume_ = Keyword.create "assume"
let _because_ = Keyword.create "because"
let _bool_ = Keyword.create "bool"
let _by_ = Keyword.create "by"
let _case_ = Keyword.create "case"
let _check_ = Keyword.create "check"
let _corec_ = Keyword.create "corec"
let _deduce_ = Keyword.create "deduce"
let _delim_ = Keyword.create "delim"
let _def_ = Keyword.create "def"
let _else_ = Keyword.create "else"
let _eqns_ = Keyword.create "eqns"
let _false_ = Keyword.create "false"
let _fix_ = Keyword.create "fix"
let _for_ = Keyword.create "for"
let _fun_ = Keyword.create "fun"
let _if_ = Keyword.create "if"
let _include_ = Keyword.create "include"
let _infix_ = Keyword.create "infix"
let _know_ = Keyword.create "know"
let _let_ = Keyword.create "let"
let _of_ = Keyword.create "of"
let _print_ = Keyword.create "print"
let _qed_ = Keyword.create "qed"
let _rec_ = Keyword.create "rec"
let _restore_ = Keyword.create "restore"
let _save_ = Keyword.create "save"
let _set_ = Keyword.create "set"
let _show_ = Keyword.create "show"
let _showing_ = Keyword.create "showing"
let _sort_ = Keyword.create "sort"
let _such_ = Keyword.create "such"
let _suppose_ = Keyword.create "suppose"
let _take_ = Keyword.create "take"
let _that_ = Keyword.create "that"
let _true_ = Keyword.create "true"
let _type_ = Keyword.create "type"
let _unsafe_ = Keyword.create "unsafe"
let _use_ = Keyword.create "use"
let _using_ = Keyword.create "using"
let _val_ = Keyword.create "val"
let lid = Earley_core.Earley.declare_grammar "lid"
let _ =
  Earley_core.Earley.set_grammar lid
    (Earley_core.Earley.fsequence
       (Earley_str.regexp ~name:"[a-z][a-zA-Z0-9_']*" "[a-z][a-zA-Z0-9_']*"
          (fun group -> group 0))
       (Earley_core.Earley.empty (fun id -> Keyword.check id; id)))
let uid = Earley_core.Earley.declare_grammar "uid"
let _ =
  Earley_core.Earley.set_grammar uid
    (Earley_core.Earley.fsequence
       (Earley_str.regexp ~name:"[A-Z][a-zA-Z0-9_']*" "[A-Z][a-zA-Z0-9_']*"
          (fun group -> group 0))
       (Earley_core.Earley.empty (fun id -> Keyword.check id; id)))
let num = Earley_core.Earley.declare_grammar "num"
let _ =
  Earley_core.Earley.set_grammar num
    (Earley_str.regexp ~name:"[0-9]+" "[0-9]+" (fun group -> group 0))
let reserved_infix = ["\226\137\161"; "\226\136\136"; "="]
let infix_re = Earley_core.Earley.declare_grammar "infix_re"
let _ =
  Earley_core.Earley.set_grammar infix_re
    (Earley_core.Earley.fsequence
       (Earley_str.regexp ~name:"[^][(){}a-zA-Z0-9_'\\\"\\\";,. \\n\\t\\r]+"
          "[^][(){}a-zA-Z0-9_'\"\";,. \n\t\r]+" (fun group -> group 0))
       (Earley_core.Earley.empty
          (fun s -> if List.mem s reserved_infix then give_up (); s)))
let infix = Earley_core.Earley.declare_grammar "infix"
let _ =
  Earley_core.Earley.set_grammar infix
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence infix
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.no_blank_test ())
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.char '_' '_')
                   (Earley_core.Earley.fsequence_ignore
                      (Earley_core.Earley.no_blank_test ())
                      (Earley_core.Earley.fsequence_position lid
                         (Earley_core.Earley.empty_pos
                            (fun __loc__start__buf ->
                               fun __loc__start__pos ->
                                 fun __loc__end__buf ->
                                   fun __loc__end__pos ->
                                     let _loc =
                                       locate __loc__start__buf
                                         __loc__start__pos __loc__end__buf
                                         __loc__end__pos in
                                     fun str1 ->
                                       fun pos1 ->
                                         fun str2 ->
                                           fun pos2 ->
                                             fun m ->
                                               let _loc_m =
                                                 locate str1 pos1 str2 pos2 in
                                               fun
                                                 ((_, s, p, pl, pr, ho) as
                                                    _default_0)
                                                 ->
                                                 let m =
                                                   evari (Some _loc_m)
                                                     (in_pos _loc_m m) in
                                                 let t =
                                                   in_pos _loc
                                                     (EProj (m, (ref `T), s)) in
                                                 (t, s, p, pl, pr, ho))))))))
          (List.cons
             (Earley_core.Earley.fsequence_position infix_re
                (Earley_core.Earley.empty
                   (fun str1 ->
                      fun pos1 ->
                        fun str2 ->
                          fun pos2 ->
                            fun s ->
                              let _loc_s = locate str1 pos1 str2 pos2 in
                              try
                                let open Env in
                                  let { name; prio = p; asso; hiho } =
                                    Hashtbl.find infix_tbl s in
                                  let epsilon = 1e-6 in
                                  let q = p -. epsilon in
                                  let (pl, pr) =
                                    match asso with
                                    | LeftAssoc -> (p, q)
                                    | RightAssoc -> (q, p)
                                    | NonAssoc -> (q, q) in
                                  let name = in_pos _loc_s name in
                                  let sym = evari (Some _loc_s) name in
                                  (sym, name, p, pl, pr, hiho)
                              with | Not_found -> give_up ()))) [])))
let llid = Earley_core.Earley.declare_grammar "llid"
let _ =
  Earley_core.Earley.set_grammar llid
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.char '(' '(')
             (Earley_core.Earley.fsequence infix
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.char ')' ')')
                   (Earley_core.Earley.empty
                      (fun ((_, id, _, _, _, _) as _default_0) -> id)))))
          (List.cons
             (Earley_core.Earley.fsequence lid
                (Earley_core.Earley.empty_pos
                   (fun __loc__start__buf ->
                      fun __loc__start__pos ->
                        fun __loc__end__buf ->
                          fun __loc__end__pos ->
                            let _loc =
                              locate __loc__start__buf __loc__start__pos
                                __loc__end__buf __loc__end__pos in
                            fun id -> in_pos _loc id))) [])))
let luid = Earley_core.Earley.declare_grammar "luid"
let _ =
  Earley_core.Earley.set_grammar luid
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence _false_
             (Earley_core.Earley.empty_pos
                (fun __loc__start__buf ->
                   fun __loc__start__pos ->
                     fun __loc__end__buf ->
                       fun __loc__end__pos ->
                         let _loc =
                           locate __loc__start__buf __loc__start__pos
                             __loc__end__buf __loc__end__pos in
                         fun _default_0 -> in_pos _loc "false")))
          (List.cons
             (Earley_core.Earley.fsequence uid
                (Earley_core.Earley.empty_pos
                   (fun __loc__start__buf ->
                      fun __loc__start__pos ->
                        fun __loc__end__buf ->
                          fun __loc__end__pos ->
                            let _loc =
                              locate __loc__start__buf __loc__start__pos
                                __loc__end__buf __loc__end__pos in
                            fun id -> in_pos _loc id)))
             (List.cons
                (Earley_core.Earley.fsequence _true_
                   (Earley_core.Earley.empty_pos
                      (fun __loc__start__buf ->
                         fun __loc__start__pos ->
                           fun __loc__end__buf ->
                             fun __loc__end__pos ->
                               let _loc =
                                 locate __loc__start__buf __loc__start__pos
                                   __loc__end__buf __loc__end__pos in
                               fun _default_0 -> in_pos _loc "true"))) []))))
let lnum = Earley_core.Earley.declare_grammar "lnum"
let _ =
  Earley_core.Earley.set_grammar lnum
    (Earley_core.Earley.fsequence num
       (Earley_core.Earley.empty_pos
          (fun __loc__start__buf ->
             fun __loc__start__pos ->
               fun __loc__end__buf ->
                 fun __loc__end__pos ->
                   let _loc =
                     locate __loc__start__buf __loc__start__pos
                       __loc__end__buf __loc__end__pos in
                   fun id -> in_pos _loc id)))
let int = Earley_core.Earley.declare_grammar "int"
let _ =
  Earley_core.Earley.set_grammar int
    (Earley_core.Earley.fsequence
       (Earley_str.regexp ~name:"[0-9]+" "[0-9]+" (fun group -> group 0))
       (Earley_core.Earley.empty (fun s -> int_of_string s)))
let float = Earley_core.Earley.declare_grammar "float"
let _ =
  Earley_core.Earley.set_grammar float
    (Earley_core.Earley.fsequence
       (Earley_str.regexp
          ~name:"[0-9]*\\\\('.'[0-9]*\\\\)?\\\\([eE][-+]?[0-9]*\\\\)?"
          "[0-9]*\\('.'[0-9]*\\)?\\([eE][-+]?[0-9]*\\)?"
          (fun group -> group 0))
       (Earley_core.Earley.empty
          (fun s -> if s = "" then give_up (); float_of_string s)))
let llid_wc = Earley_core.Earley.declare_grammar "llid_wc"
let _ =
  Earley_core.Earley.set_grammar llid_wc
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.char '_' '_')
             (Earley_core.Earley.empty_pos
                (fun __loc__start__buf ->
                   fun __loc__start__pos ->
                     fun __loc__end__buf ->
                       fun __loc__end__pos ->
                         let _loc =
                           locate __loc__start__buf __loc__start__pos
                             __loc__end__buf __loc__end__pos in
                         in_pos _loc "_")))
          (List.cons
             (Earley_core.Earley.fsequence lid
                (Earley_core.Earley.empty_pos
                   (fun __loc__start__buf ->
                      fun __loc__start__pos ->
                        fun __loc__end__buf ->
                          fun __loc__end__pos ->
                            let _loc =
                              locate __loc__start__buf __loc__start__pos
                                __loc__end__buf __loc__end__pos in
                            fun id -> in_pos _loc id))) [])))
let elipsis = Earley_core.Earley.declare_grammar "elipsis"
let _ =
  Earley_core.Earley.set_grammar elipsis
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "..." "...")
             (Earley_core.Earley.empty ()))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "\226\139\175" "\226\139\175")
                (Earley_core.Earley.empty ())) [])))
let infty = Earley_core.Earley.declare_grammar "infty"
let _ =
  Earley_core.Earley.set_grammar infty
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "<inf>" "<inf>")
             (Earley_core.Earley.empty ()))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "\226\136\158" "\226\136\158")
                (Earley_core.Earley.empty ())) [])))
let arrow = Earley_core.Earley.declare_grammar "arrow"
let _ =
  Earley_core.Earley.set_grammar arrow
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\226\134\146" "\226\134\146")
       (Earley_core.Earley.empty ()))
let impl = Earley_core.Earley.declare_grammar "impl"
let _ =
  Earley_core.Earley.set_grammar impl
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "\226\134\157" "\226\134\157")
             (Earley_core.Earley.empty Totality.Any))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "\226\135\146" "\226\135\146")
                (Earley_core.Earley.empty Totality.Tot))
             (List.cons
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.string "\226\134\146" "\226\134\146")
                   (Earley_core.Earley.empty Totality.Ter)) []))))
let scis = Earley_core.Earley.declare_grammar "scis"
let _ =
  Earley_core.Earley.set_grammar scis
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\226\156\130" "\226\156\130")
       (Earley_core.Earley.empty ()))
let equiv = Earley_core.Earley.declare_grammar "equiv"
let _ =
  Earley_core.Earley.set_grammar equiv
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "==" "==")
             (Earley_core.Earley.empty ()))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "\226\137\161" "\226\137\161")
                (Earley_core.Earley.empty ())) [])))
let nequiv = Earley_core.Earley.declare_grammar "nequiv"
let _ =
  Earley_core.Earley.set_grammar nequiv
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "!=" "!=")
             (Earley_core.Earley.empty ()))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "\226\137\160" "\226\137\160")
                (Earley_core.Earley.empty ())) [])))
let neg_sym = Earley_core.Earley.declare_grammar "neg_sym"
let _ =
  Earley_core.Earley.set_grammar neg_sym
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\194\172" "\194\172")
       (Earley_core.Earley.empty ()))
let prod = Earley_core.Earley.declare_grammar "prod"
let _ =
  Earley_core.Earley.set_grammar prod
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\195\151" "\195\151")
       (Earley_core.Earley.empty ()))
let lambda = Earley_core.Earley.declare_grammar "lambda"
let _ =
  Earley_core.Earley.set_grammar lambda
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\206\187" "\206\187")
       (Earley_core.Earley.empty ()))
let langle = Earley_core.Earley.declare_grammar "langle"
let _ =
  Earley_core.Earley.set_grammar langle
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\226\159\168" "\226\159\168")
       (Earley_core.Earley.empty ()))
let rangle = Earley_core.Earley.declare_grammar "rangle"
let _ =
  Earley_core.Earley.set_grammar rangle
    (Earley_core.Earley.fsequence_ignore
       (Earley_core.Earley.string "\226\159\169" "\226\159\169")
       (Earley_core.Earley.empty ()))
let empty_s = Earley_core.Earley.declare_grammar "empty_s"
let _ =
  Earley_core.Earley.set_grammar empty_s
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "\226\136\133" "\226\136\133")
             (Earley_core.Earley.empty ()))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "[.]" "[.]")
                (Earley_core.Earley.empty ())) [])))
let comma = Earley_core.Earley.declare_grammar "comma"
let _ =
  Earley_core.Earley.set_grammar comma
    (Earley_core.Earley.fsequence_ignore (Earley_core.Earley.string "," ",")
       (Earley_core.Earley.empty ()))
let semi = Earley_core.Earley.declare_grammar "semi"
let _ =
  Earley_core.Earley.set_grammar semi
    (Earley_core.Earley.fsequence_ignore (Earley_core.Earley.string ";" ";")
       (Earley_core.Earley.empty ()))
let column = Earley_core.Earley.declare_grammar "column"
let _ =
  Earley_core.Earley.set_grammar column
    (Earley_core.Earley.fsequence_ignore (Earley_core.Earley.string ":" ":")
       (Earley_core.Earley.empty ()))
let _st_ = Earley_core.Earley.declare_grammar "_st_"
let _ =
  Earley_core.Earley.set_grammar _st_
    (Earley_core.Earley.fsequence_ignore _such_
       (Earley_core.Earley.fsequence_ignore _that_
          (Earley_core.Earley.empty ())))
let neg = Earley_core.Earley.declare_grammar "neg"
let _ =
  Earley_core.Earley.set_grammar neg
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence neg_sym
             (Earley_core.Earley.empty (fun _default_0 -> false)))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.empty ()) (Earley_core.Earley.empty true))
             [])))
let v_rec = Earley_core.Earley.declare_grammar "v_rec"
let _ =
  Earley_core.Earley.set_grammar v_rec
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence _unsafe_
             (Earley_core.Earley.empty (fun _default_0 -> `Unsafe)))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.empty ()) (Earley_core.Earley.empty `Non))
             (List.cons
                (Earley_core.Earley.fsequence _rec_
                   (Earley_core.Earley.empty (fun _default_0 -> `Rec))) []))))
let t_rec = Earley_core.Earley.declare_grammar "t_rec"
let _ =
  Earley_core.Earley.set_grammar t_rec
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence _corec_
             (Earley_core.Earley.empty (fun _default_0 -> `CoRec)))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.empty ()) (Earley_core.Earley.empty `Non))
             (List.cons
                (Earley_core.Earley.fsequence _rec_
                   (Earley_core.Earley.empty (fun _default_0 -> `Rec))) []))))
let strict = Earley_core.Earley.declare_grammar "strict"
let _ =
  Earley_core.Earley.set_grammar strict
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.char ';' ';')
             (Earley_core.Earley.fsequence elipsis
                (Earley_core.Earley.empty (fun _default_0 -> false))))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.empty ()) (Earley_core.Earley.empty true))
             [])))
let eq = Earley_core.Earley.declare_grammar "eq"
let _ =
  Earley_core.Earley.set_grammar eq
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence nequiv
             (Earley_core.Earley.empty (fun _default_0 -> false)))
          (List.cons
             (Earley_core.Earley.fsequence equiv
                (Earley_core.Earley.empty (fun _default_0 -> true))) [])))
type ps =
  | Fs 
  | As 
let (sort, sort__set__grammar) = Earley_core.Earley.grammar_prio "sort"
let _ =
  sort__set__grammar
    ((List.cons
        ((fun (p : ps) -> p <= Fs),
          (Earley_core.Earley.fsequence (sort As)
             (Earley_core.Earley.fsequence arrow
                (Earley_core.Earley.fsequence (sort Fs)
                   (Earley_core.Earley.empty_pos
                      (fun __loc__start__buf ->
                         fun __loc__start__pos ->
                           fun __loc__end__buf ->
                             fun __loc__end__pos ->
                               let _loc =
                                 locate __loc__start__buf __loc__start__pos
                                   __loc__end__buf __loc__end__pos in
                               fun s2 ->
                                 fun _default_0 ->
                                   fun s1 -> in_pos _loc (SFun (s1, s2))))))))
        (List.cons
           ((fun (p : ps) -> p <= As),
             (Earley_core.Earley.fsequence
                (Earley_core.Earley.alternatives
                   (List.cons
                      (Earley_core.Earley.fsequence_ignore
                         (Earley_core.Earley.string "<value>" "<value>")
                         (Earley_core.Earley.empty ()))
                      (List.cons
                         (Earley_core.Earley.fsequence_ignore
                            (Earley_core.Earley.string "\206\185" "\206\185")
                            (Earley_core.Earley.empty ()))
                         (List.cons
                            (Earley_core.Earley.fsequence_ignore
                               (Earley_core.Earley.string "<iota>" "<iota>")
                               (Earley_core.Earley.empty ())) []))))
                (Earley_core.Earley.empty_pos
                   (fun __loc__start__buf ->
                      fun __loc__start__pos ->
                        fun __loc__end__buf ->
                          fun __loc__end__pos ->
                            let _loc =
                              locate __loc__start__buf __loc__start__pos
                                __loc__end__buf __loc__end__pos in
                            fun _default_0 -> in_pos _loc sv))))
           (List.cons
              ((fun (p : ps) -> p <= As),
                (Earley_core.Earley.fsequence
                   (Earley_core.Earley.alternatives
                      (List.cons
                         (Earley_core.Earley.fsequence_ignore
                            (Earley_core.Earley.string "<term>" "<term>")
                            (Earley_core.Earley.empty ()))
                         (List.cons
                            (Earley_core.Earley.fsequence_ignore
                               (Earley_core.Earley.string "\207\132"
                                  "\207\132") (Earley_core.Earley.empty ()))
                            (List.cons
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.string "<tau>" "<tau>")
                                  (Earley_core.Earley.empty ())) []))))
                   (Earley_core.Earley.empty_pos
                      (fun __loc__start__buf ->
                         fun __loc__start__pos ->
                           fun __loc__end__buf ->
                             fun __loc__end__pos ->
                               let _loc =
                                 locate __loc__start__buf __loc__start__pos
                                   __loc__end__buf __loc__end__pos in
                               fun _default_0 -> in_pos _loc ST))))
              (List.cons
                 ((fun (p : ps) -> p <= As),
                   (Earley_core.Earley.fsequence
                      (Earley_core.Earley.alternatives
                         (List.cons
                            (Earley_core.Earley.fsequence_ignore
                               (Earley_core.Earley.string "<stack>" "<stack>")
                               (Earley_core.Earley.empty ()))
                            (List.cons
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.string "\207\131"
                                     "\207\131")
                                  (Earley_core.Earley.empty ()))
                               (List.cons
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.string "<sigma>"
                                        "<sigma>")
                                     (Earley_core.Earley.empty ())) []))))
                      (Earley_core.Earley.empty_pos
                         (fun __loc__start__buf ->
                            fun __loc__start__pos ->
                              fun __loc__end__buf ->
                                fun __loc__end__pos ->
                                  let _loc =
                                    locate __loc__start__buf
                                      __loc__start__pos __loc__end__buf
                                      __loc__end__pos in
                                  fun _default_0 -> in_pos _loc SS))))
                 (List.cons
                    ((fun (p : ps) -> p <= As),
                      (Earley_core.Earley.fsequence
                         (Earley_core.Earley.alternatives
                            (List.cons
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.string "<prop>"
                                     "<prop>") (Earley_core.Earley.empty ()))
                               (List.cons
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.string "\206\191"
                                        "\206\191")
                                     (Earley_core.Earley.empty ()))
                                  (List.cons
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.string
                                           "<omicron>" "<omicron>")
                                        (Earley_core.Earley.empty ())) []))))
                         (Earley_core.Earley.empty_pos
                            (fun __loc__start__buf ->
                               fun __loc__start__pos ->
                                 fun __loc__end__buf ->
                                   fun __loc__end__pos ->
                                     let _loc =
                                       locate __loc__start__buf
                                         __loc__start__pos __loc__end__buf
                                         __loc__end__pos in
                                     fun _default_0 -> in_pos _loc SP))))
                    (List.cons
                       ((fun (p : ps) -> p <= As),
                         (Earley_core.Earley.fsequence
                            (Earley_core.Earley.alternatives
                               (List.cons
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.string "<ordinal>"
                                        "<ordinal>")
                                     (Earley_core.Earley.empty ()))
                                  (List.cons
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.string "\206\186"
                                           "\206\186")
                                        (Earley_core.Earley.empty ()))
                                     (List.cons
                                        (Earley_core.Earley.fsequence_ignore
                                           (Earley_core.Earley.string
                                              "<kappa>" "<kappa>")
                                           (Earley_core.Earley.empty ())) []))))
                            (Earley_core.Earley.empty_pos
                               (fun __loc__start__buf ->
                                  fun __loc__start__pos ->
                                    fun __loc__end__buf ->
                                      fun __loc__end__pos ->
                                        let _loc =
                                          locate __loc__start__buf
                                            __loc__start__pos __loc__end__buf
                                            __loc__end__pos in
                                        fun _default_0 -> in_pos _loc SO))))
                       (List.cons
                          ((fun (p : ps) -> p <= As),
                            (Earley_core.Earley.fsequence lid
                               (Earley_core.Earley.empty_pos
                                  (fun __loc__start__buf ->
                                     fun __loc__start__pos ->
                                       fun __loc__end__buf ->
                                         fun __loc__end__pos ->
                                           let _loc =
                                             locate __loc__start__buf
                                               __loc__start__pos
                                               __loc__end__buf
                                               __loc__end__pos in
                                           fun id -> in_pos _loc (SVar id)))))
                          (List.cons
                             ((fun (p : ps) -> p <= As),
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.string "(" "(")
                                  (Earley_core.Earley.fsequence (sort Fs)
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.string ")" ")")
                                        (Earley_core.Earley.empty
                                           (fun s -> s)))))) [])))))))),
      (fun (p : ps) -> []))
let sort = sort Fs
let s_arg = Earley_core.Earley.declare_grammar "s_arg"
let _ =
  Earley_core.Earley.set_grammar s_arg
    (Earley_core.Earley.fsequence llid
       (Earley_core.Earley.fsequence
          (Earley_core.Earley.option None
             (Earley_core.Earley.apply (fun x -> Some x)
                (Earley_core.Earley.fsequence_ignore column
                   (Earley_core.Earley.fsequence sort
                      (Earley_core.Earley.empty (fun s -> s))))))
          (Earley_core.Earley.empty (fun so -> fun id -> (id, so)))))
let s_lst = Earley_core.Earley.declare_grammar "s_lst"
let _ = Earley_core.Earley.set_grammar s_lst (list1 s_arg comma)
let s_args = Earley_core.Earley.declare_grammar "s_args"
let _ =
  Earley_core.Earley.set_grammar s_args
    (Earley_core.Earley.option []
       (Earley_core.Earley.fsequence_ignore langle
          (Earley_core.Earley.fsequence s_lst
             (Earley_core.Earley.fsequence_ignore rangle
                (Earley_core.Earley.empty (fun l -> l))))))
let (<<=) p1 p2 =
  match (p1, p2) with
  | (_, HO) -> true
  | (Any, _) -> true
  | (Prp p1, Prp p2) -> p1 <= p2
  | (Trm p1, Trm p2) -> p1 <= p2
  | (Stk, Stk) -> true
  | (Ord p1, Ord p2) -> p1 <= p2
  | (_, _) -> false
let (expr, expr__set__grammar) = Earley_core.Earley.grammar_prio "expr"
let ho_args = Earley_core.Earley.declare_grammar "ho_args"
let arg_t = Earley_core.Earley.declare_grammar "arg_t"
let arg = Earley_core.Earley.declare_grammar "arg"
let field_nt = Earley_core.Earley.declare_grammar "field_nt"
let let_arg = Earley_core.Earley.declare_grammar "let_arg"
let field = Earley_core.Earley.declare_grammar "field"
let patt = Earley_core.Earley.declare_grammar "patt"
let set_param = Earley_core.Earley.declare_grammar "set_param"
let rec term = expr (Trm F)
and prop = expr (Prp F)
and stack = expr Stk
and ordinal = expr (Ord F)
and any = expr Any
let _ =
  expr__set__grammar
    ((List.cons
        ((fun (m : mode) -> (m <<= Stk) || (m <<= (Trm A))),
          (Earley_core.Earley.fsequence goal
             (Earley_core.Earley.empty_pos
                (fun __loc__start__buf ->
                   fun __loc__start__pos ->
                     fun __loc__end__buf ->
                       fun __loc__end__pos ->
                         let _loc =
                           locate __loc__start__buf __loc__start__pos
                             __loc__end__buf __loc__end__pos in
                         fun s -> in_pos _loc (EGoal s)))))
        (List.cons
           ((fun (m : mode) -> m <<= Any),
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "(" "(")
                (Earley_core.Earley.fsequence llid
                   (Earley_core.Earley.fsequence_ignore
                      (Earley_core.Earley.string ":" ":")
                      (Earley_core.Earley.fsequence sort
                         (Earley_core.Earley.fsequence_ignore
                            (Earley_core.Earley.string "\226\134\166"
                               "\226\134\166")
                            (Earley_core.Earley.fsequence any
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.string ")" ")")
                                  (Earley_core.Earley.empty_pos
                                     (fun __loc__start__buf ->
                                        fun __loc__start__pos ->
                                          fun __loc__end__buf ->
                                            fun __loc__end__pos ->
                                              let _loc =
                                                locate __loc__start__buf
                                                  __loc__start__pos
                                                  __loc__end__buf
                                                  __loc__end__pos in
                                              fun e ->
                                                fun s ->
                                                  fun x ->
                                                    in_pos _loc
                                                      (EHOFn (x, s, e))))))))))))
           (List.cons
              ((fun (m : mode) -> (m <<= HO) && (m <> (Ord E))),
                (Earley_core.Earley.fsequence (expr HO)
                   (Earley_core.Earley.fsequence ho_args
                      (Earley_core.Earley.empty_pos
                         (fun __loc__start__buf ->
                            fun __loc__start__pos ->
                              fun __loc__end__buf ->
                                fun __loc__end__pos ->
                                  let _loc =
                                    locate __loc__start__buf
                                      __loc__start__pos __loc__end__buf
                                      __loc__end__pos in
                                  fun args ->
                                    fun e ->
                                      in_pos _loc
                                        (EHOAp
                                           (e, (new_sort_uvar None), args)))))))
              (List.cons
                 ((fun (m : mode) -> m <<= HO),
                   (Earley_core.Earley.fsequence_position llid
                      (Earley_core.Earley.fsequence
                         (Earley_core.Earley.option None
                            (Earley_core.Earley.apply (fun x -> Some x)
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.char '^' '^')
                                  (Earley_core.Earley.fsequence
                                     (expr (Ord E))
                                     (Earley_core.Earley.empty
                                        (fun _default_0 -> _default_0))))))
                         (Earley_core.Earley.empty_pos
                            (fun __loc__start__buf ->
                               fun __loc__start__pos ->
                                 fun __loc__end__buf ->
                                   fun __loc__end__pos ->
                                     let _loc =
                                       locate __loc__start__buf
                                         __loc__start__pos __loc__end__buf
                                         __loc__end__pos in
                                     fun s ->
                                       fun str1 ->
                                         fun pos1 ->
                                           fun str2 ->
                                             fun pos2 ->
                                               fun id ->
                                                 let _loc_id =
                                                   locate str1 pos1 str2 pos2 in
                                                 match s with
                                                 | None ->
                                                     evari (Some _loc) id
                                                 | Some s ->
                                                     let id =
                                                       Pos.make id.pos
                                                         (id.elt ^ "#") in
                                                     let x =
                                                       evari (Some _loc_id)
                                                         id in
                                                     in_pos _loc
                                                       (EHOAp
                                                          (x,
                                                            (new_sort_uvar
                                                               None), 
                                                            [s])))))))
                 (List.cons
                    ((fun (m : mode) -> m = HO),
                      (Earley_core.Earley.fsequence_ignore
                         (Earley_core.Earley.char '(' '(')
                         (Earley_core.Earley.fsequence (expr Any)
                            (Earley_core.Earley.fsequence_ignore
                               (Earley_core.Earley.char ')' ')')
                               (Earley_core.Earley.empty
                                  (fun e ->
                                     match e.elt with
                                     | EInfx (e, _) -> e
                                     | _ -> e))))))
                    (List.cons
                       ((fun (m : mode) -> m <<= (Prp A)),
                         (Earley_core.Earley.fsequence _bool_
                            (Earley_core.Earley.empty_pos
                               (fun __loc__start__buf ->
                                  fun __loc__start__pos ->
                                    fun __loc__end__buf ->
                                      fun __loc__end__pos ->
                                        let _loc =
                                          locate __loc__start__buf
                                            __loc__start__pos __loc__end__buf
                                            __loc__end__pos in
                                        fun _default_0 -> p_bool (Some _loc)))))
                       (List.cons
                          ((fun (m : mode) -> m <<= (Prp F)),
                            (Earley_core.Earley.fsequence (expr (Prp P))
                               (Earley_core.Earley.fsequence impl
                                  (Earley_core.Earley.fsequence prop
                                     (Earley_core.Earley.empty_pos
                                        (fun __loc__start__buf ->
                                           fun __loc__start__pos ->
                                             fun __loc__end__buf ->
                                               fun __loc__end__pos ->
                                                 let _loc =
                                                   locate __loc__start__buf
                                                     __loc__start__pos
                                                     __loc__end__buf
                                                     __loc__end__pos in
                                                 fun b ->
                                                   fun t ->
                                                     fun a ->
                                                       in_pos _loc
                                                         (EFunc (t, a, b))))))))
                          (List.cons
                             ((fun (m : mode) -> m <<= (Prp P)),
                               (Earley_core.Earley.fsequence (expr (Prp R))
                                  (Earley_core.Earley.fsequence
                                     (Earley_core.Earley.apply
                                        (fun f -> f [])
                                        (Earley_core.Earley.fixpoint1'
                                           (fun l -> l)
                                           (Earley_core.Earley.fsequence_ignore
                                              prod
                                              (Earley_core.Earley.fsequence
                                                 (expr (Prp R))
                                                 (Earley_core.Earley.empty
                                                    (fun b -> b))))
                                           (fun x ->
                                              fun f ->
                                                fun l -> f (List.cons x l))))
                                     (Earley_core.Earley.empty_pos
                                        (fun __loc__start__buf ->
                                           fun __loc__start__pos ->
                                             fun __loc__end__buf ->
                                               fun __loc__end__pos ->
                                                 let _loc =
                                                   locate __loc__start__buf
                                                     __loc__start__pos
                                                     __loc__end__buf
                                                     __loc__end__pos in
                                                 fun bs ->
                                                   fun a ->
                                                     tuple_type _loc (a ::
                                                       bs))))))
                             (List.cons
                                ((fun (m : mode) -> m <<= (Prp A)),
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.string "{" "{")
                                     (Earley_core.Earley.fsequence
                                        (list1
                                           (Earley_core.Earley.fsequence llid
                                              (Earley_core.Earley.fsequence_ignore
                                                 (Earley_core.Earley.string
                                                    ":" ":")
                                                 (Earley_core.Earley.fsequence
                                                    prop
                                                    (Earley_core.Earley.empty
                                                       (fun a ->
                                                          fun l -> (l, a))))))
                                           semi)
                                        (Earley_core.Earley.fsequence strict
                                           (Earley_core.Earley.fsequence_ignore
                                              (Earley_core.Earley.string "}"
                                                 "}")
                                              (Earley_core.Earley.empty_pos
                                                 (fun __loc__start__buf ->
                                                    fun __loc__start__pos ->
                                                      fun __loc__end__buf ->
                                                        fun __loc__end__pos
                                                          ->
                                                          let _loc =
                                                            locate
                                                              __loc__start__buf
                                                              __loc__start__pos
                                                              __loc__end__buf
                                                              __loc__end__pos in
                                                          fun s ->
                                                            fun fs ->
                                                              in_pos _loc
                                                                (EProd
                                                                   (fs, s)))))))))
                                (List.cons
                                   ((fun (m : mode) -> m <<= (Prp A)),
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.string "{" "{")
                                        (Earley_core.Earley.fsequence elipsis
                                           (Earley_core.Earley.fsequence_ignore
                                              (Earley_core.Earley.string "}"
                                                 "}")
                                              (Earley_core.Earley.empty_pos
                                                 (fun __loc__start__buf ->
                                                    fun __loc__start__pos ->
                                                      fun __loc__end__buf ->
                                                        fun __loc__end__pos
                                                          ->
                                                          let _loc =
                                                            locate
                                                              __loc__start__buf
                                                              __loc__start__pos
                                                              __loc__end__buf
                                                              __loc__end__pos in
                                                          fun _default_0 ->
                                                            in_pos _loc
                                                              (EProd
                                                                 ([], false))))))))
                                   (List.cons
                                      ((fun (m : mode) -> m <<= HO),
                                        (Earley_core.Earley.fsequence_ignore
                                           (Earley_core.Earley.string "{" "{")
                                           (Earley_core.Earley.fsequence_ignore
                                              (Earley_core.Earley.string "}"
                                                 "}")
                                              (Earley_core.Earley.empty_pos
                                                 (fun __loc__start__buf ->
                                                    fun __loc__start__pos ->
                                                      fun __loc__end__buf ->
                                                        fun __loc__end__pos
                                                          ->
                                                          let _loc =
                                                            locate
                                                              __loc__start__buf
                                                              __loc__start__pos
                                                              __loc__end__buf
                                                              __loc__end__pos in
                                                          in_pos _loc EUnit)))))
                                      (List.cons
                                         ((fun (m : mode) -> m <<= (Prp A)),
                                           (Earley_core.Earley.fsequence_ignore
                                              (Earley_core.Earley.string "["
                                                 "[")
                                              (Earley_core.Earley.fsequence
                                                 (list1
                                                    (Earley_core.Earley.fsequence
                                                       luid
                                                       (Earley_core.Earley.fsequence
                                                          (Earley_core.Earley.option
                                                             None
                                                             (Earley_core.Earley.apply
                                                                (fun x ->
                                                                   Some x)
                                                                (Earley_core.Earley.fsequence_ignore
                                                                   _of_
                                                                   (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.empty
                                                                    (fun a ->
                                                                    a))))))
                                                          (Earley_core.Earley.empty
                                                             (fun a ->
                                                                fun l ->
                                                                  (l, a)))))
                                                    semi)
                                                 (Earley_core.Earley.fsequence_ignore
                                                    (Earley_core.Earley.string
                                                       "]" "]")
                                                    (Earley_core.Earley.empty_pos
                                                       (fun __loc__start__buf
                                                          ->
                                                          fun
                                                            __loc__start__pos
                                                            ->
                                                            fun
                                                              __loc__end__buf
                                                              ->
                                                              fun
                                                                __loc__end__pos
                                                                ->
                                                                let _loc =
                                                                  locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                fun fs ->
                                                                  in_pos _loc
                                                                    (
                                                                    EDSum fs)))))))
                                         (List.cons
                                            ((fun (m : mode) -> m <<= (Prp A)),
                                              (Earley_core.Earley.fsequence
                                                 empty_s
                                                 (Earley_core.Earley.empty_pos
                                                    (fun __loc__start__buf ->
                                                       fun __loc__start__pos
                                                         ->
                                                         fun __loc__end__buf
                                                           ->
                                                           fun
                                                             __loc__end__pos
                                                             ->
                                                             let _loc =
                                                               locate
                                                                 __loc__start__buf
                                                                 __loc__start__pos
                                                                 __loc__end__buf
                                                                 __loc__end__pos in
                                                             fun _default_0
                                                               ->
                                                               in_pos _loc
                                                                 (EDSum [])))))
                                            (List.cons
                                               ((fun (m : mode) ->
                                                   m <<= (Prp F)),
                                                 (Earley_core.Earley.fsequence_ignore
                                                    (Earley_core.Earley.string
                                                       "\226\136\128"
                                                       "\226\136\128")
                                                    (Earley_core.Earley.fsequence
                                                       llid
                                                       (Earley_core.Earley.fsequence
                                                          (Earley_core.Earley.apply
                                                             (fun f -> f [])
                                                             (Earley_core.Earley.fixpoint'
                                                                (fun l -> l)
                                                                llid
                                                                (fun x ->
                                                                   fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                          (Earley_core.Earley.fsequence
                                                             (Earley_core.Earley.option
                                                                None
                                                                (Earley_core.Earley.apply
                                                                   (fun x ->
                                                                    Some x)
                                                                   (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ':' ':')
                                                                    (Earley_core.Earley.fsequence
                                                                    sort
                                                                    (Earley_core.Earley.empty
                                                                    (fun s ->
                                                                    s))))))
                                                             (Earley_core.Earley.fsequence_ignore
                                                                (Earley_core.Earley.char
                                                                   ',' ',')
                                                                (Earley_core.Earley.fsequence
                                                                   prop
                                                                   (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun s ->
                                                                    fun xs ->
                                                                    fun x ->
                                                                    euniv
                                                                    _loc x xs
                                                                    s a)))))))))
                                               (List.cons
                                                  ((fun (m : mode) ->
                                                      m <<= (Prp F)),
                                                    (Earley_core.Earley.fsequence_ignore
                                                       (Earley_core.Earley.string
                                                          "\226\136\128"
                                                          "\226\136\128")
                                                       (Earley_core.Earley.fsequence
                                                          llid
                                                          (Earley_core.Earley.fsequence
                                                             (Earley_core.Earley.apply
                                                                (fun f ->
                                                                   f [])
                                                                (Earley_core.Earley.fixpoint'
                                                                   (fun l ->
                                                                    l) llid
                                                                   (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                             (Earley_core.Earley.fsequence_ignore
                                                                (Earley_core.Earley.string
                                                                   "\226\136\136"
                                                                   "\226\136\136")
                                                                (Earley_core.Earley.fsequence
                                                                   prop
                                                                   (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ',' ',')
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun b ->
                                                                    fun a ->
                                                                    fun xs ->
                                                                    fun x ->
                                                                    euniv_in
                                                                    _loc x xs
                                                                    a b))))))))))
                                                  (List.cons
                                                     ((fun (m : mode) ->
                                                         m <<= (Prp F)),
                                                       (Earley_core.Earley.fsequence_ignore
                                                          (Earley_core.Earley.string
                                                             "\226\136\131"
                                                             "\226\136\131")
                                                          (Earley_core.Earley.fsequence
                                                             llid
                                                             (Earley_core.Earley.fsequence
                                                                (Earley_core.Earley.apply
                                                                   (fun f ->
                                                                    f [])
                                                                   (Earley_core.Earley.fixpoint'
                                                                    (fun l ->
                                                                    l) llid
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                (Earley_core.Earley.fsequence
                                                                   (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ':' ':')
                                                                    (Earley_core.Earley.fsequence
                                                                    sort
                                                                    (Earley_core.Earley.empty
                                                                    (fun s ->
                                                                    s))))))
                                                                   (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ',' ',')
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun s ->
                                                                    fun xs ->
                                                                    fun x ->
                                                                    eexis
                                                                    _loc x xs
                                                                    s a)))))))))
                                                     (List.cons
                                                        ((fun (m : mode) ->
                                                            m <<= (Prp F)),
                                                          (Earley_core.Earley.fsequence_ignore
                                                             (Earley_core.Earley.string
                                                                "\226\136\131"
                                                                "\226\136\131")
                                                             (Earley_core.Earley.fsequence
                                                                llid
                                                                (Earley_core.Earley.fsequence
                                                                   (Earley_core.Earley.apply
                                                                    (fun f ->
                                                                    f [])
                                                                    (Earley_core.Earley.fixpoint'
                                                                    (fun l ->
                                                                    l) llid
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                   (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "\226\136\136"
                                                                    "\226\136\136")
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ',' ',')
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun b ->
                                                                    fun a ->
                                                                    fun xs ->
                                                                    fun x ->
                                                                    eexis_in
                                                                    _loc x xs
                                                                    a b))))))))))
                                                        (List.cons
                                                           ((fun (m : mode)
                                                               ->
                                                               m <<= (Prp A)),
                                                             (Earley_core.Earley.fsequence_ignore
                                                                (Earley_core.Earley.string
                                                                   "{" "{")
                                                                (Earley_core.Earley.fsequence
                                                                   llid
                                                                   (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "\226\136\136"
                                                                    "\226\136\136")
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "}" "}")
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun x ->
                                                                    esett
                                                                    _loc x a))))))))
                                                           (List.cons
                                                              ((fun
                                                                  (m : mode)
                                                                  ->
                                                                  m <<=
                                                                    (
                                                                    Prp F)),
                                                                (Earley_core.Earley.fsequence_ignore
                                                                   (Earley_core.Earley.string
                                                                    "\206\188"
                                                                    "\206\188")
                                                                   (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    (none
                                                                    EConv)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '_' '_')
                                                                    (Earley_core.Earley.fsequence
                                                                    ordinal
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    _default_0)))))
                                                                    (Earley_core.Earley.fsequence
                                                                    llid
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ',' ',')
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun x ->
                                                                    fun o ->
                                                                    in_pos
                                                                    _loc
                                                                    (EFixM
                                                                    (o, x, a))))))))))
                                                              (List.cons
                                                                 ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Prp F)),
                                                                   (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "\206\189"
                                                                    "\206\189")
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    (none
                                                                    EConv)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '_' '_')
                                                                    (Earley_core.Earley.fsequence
                                                                    ordinal
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    _default_0)))))
                                                                    (Earley_core.Earley.fsequence
                                                                    llid
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ',' ',')
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun x ->
                                                                    fun o ->
                                                                    in_pos
                                                                    _loc
                                                                    (EFixN
                                                                    (o, x, a))))))))))
                                                                 (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Prp M)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "\226\136\136"
                                                                    "\226\136\136")
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp M))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun t ->
                                                                    in_pos
                                                                    _loc
                                                                    (EMemb
                                                                    (t, a))))))))
                                                                    (
                                                                    List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Prp R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp M))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "|" "|")
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.fsequence
                                                                    eq
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    fun
                                                                    _default_1
                                                                    ->
                                                                    (_default_1,
                                                                    _default_0)))))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun bu ->
                                                                    fun t ->
                                                                    fun a ->
                                                                    let 
                                                                    (b, u) =
                                                                    match bu
                                                                    with
                                                                    | 
                                                                    Some
                                                                    (b, u) ->
                                                                    (b, u)
                                                                    | 
                                                                    None ->
                                                                    (true,
                                                                    (Pos.none
                                                                    (ECons
                                                                    ((Pos.none
                                                                    "true"),
                                                                    None)))) in
                                                                    in_pos
                                                                    _loc
                                                                    (ERest
                                                                    ((Some a),
                                                                    (EEquiv
                                                                    (t, b, u)))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Prp A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.fsequence
                                                                    eq
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    fun b ->
                                                                    fun t ->
                                                                    in_pos
                                                                    _loc
                                                                    (ERest
                                                                    (None,
                                                                    (EEquiv
                                                                    (t, b, u))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Prp R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp M))
                                                                    (Earley_core.Earley.fsequence
                                                                    _if_
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.fsequence
                                                                    eq
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    fun
                                                                    _default_1
                                                                    ->
                                                                    (_default_1,
                                                                    _default_0)))))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun bu ->
                                                                    fun t ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    fun a ->
                                                                    let 
                                                                    (b, u) =
                                                                    match bu
                                                                    with
                                                                    | 
                                                                    Some
                                                                    (b, u) ->
                                                                    (b, u)
                                                                    | 
                                                                    None ->
                                                                    (true,
                                                                    (Pos.none
                                                                    (ECons
                                                                    ((Pos.none
                                                                    "true"),
                                                                    None)))) in
                                                                    in_pos
                                                                    _loc
                                                                    (EImpl
                                                                    ((EEquiv
                                                                    (t, b, u)),
                                                                    (Some a))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Prp A)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "(" "(")
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp F'))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    ")" ")")
                                                                    (Earley_core.Earley.empty
                                                                    (fun e ->
                                                                    match 
                                                                    e.elt
                                                                    with
                                                                    | 
                                                                    EInfx
                                                                    (e, _) ->
                                                                    e
                                                                    | 
                                                                    _ -> e))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    (m <<=
                                                                    (Prp A))
                                                                    &&
                                                                    ((m <>
                                                                    Any) &&
                                                                    (m <>
                                                                    (Prp F')))),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.empty
                                                                    (fun t ->
                                                                    match 
                                                                    t.elt
                                                                    with
                                                                    | 
                                                                    EVari _
                                                                    |EHOAp _
                                                                    |EUnit ->
                                                                    give_up
                                                                    ()
                                                                    | 
                                                                    _ -> t))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _fun_
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.apply
                                                                    (fun f ->
                                                                    f [])
                                                                    (Earley_core.Earley.fixpoint1'
                                                                    (fun l ->
                                                                    l) arg
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun args
                                                                    ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (ELAbs
                                                                    (((List.hd
                                                                    args),
                                                                    (List.tl
                                                                    args)),
                                                                    t))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _take_
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.apply
                                                                    (fun f ->
                                                                    f [])
                                                                    (Earley_core.Earley.fixpoint1'
                                                                    (fun l ->
                                                                    l) arg
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun args
                                                                    ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (ELAbs
                                                                    (((List.hd
                                                                    args),
                                                                    (List.tl
                                                                    args)),
                                                                    t)))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _suppose_
                                                                    (Earley_core.Earley.fsequence
                                                                    (list1
                                                                    (expr
                                                                    (Prp F))
                                                                    comma)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun props
                                                                    ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    suppose
                                                                    _loc
                                                                    props t)))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    lambda
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.apply
                                                                    (fun f ->
                                                                    f [])
                                                                    (Earley_core.Earley.fixpoint1'
                                                                    (fun l ->
                                                                    l) arg
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '.' '.')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun args
                                                                    ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    single_line
                                                                    _loc;
                                                                    in_pos
                                                                    _loc
                                                                    (ELAbs
                                                                    (((List.hd
                                                                    args),
                                                                    (List.tl
                                                                    args)),
                                                                    t)))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    luid
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "[" "[")
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "]" "]")
                                                                    (Earley_core.Earley.empty
                                                                    (fun t ->
                                                                    t)))))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun c ->
                                                                    in_pos
                                                                    _loc
                                                                    (ECons
                                                                    (c,
                                                                    (Option.map
                                                                    (fun t ->
                                                                    (t,
                                                                    (ref `T)))
                                                                    t))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '[' '[')
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ']' ']')
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    v_nil
                                                                    _loc)))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    int
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun n ->
                                                                    from_int
                                                                    _loc n))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm I)),
                                                                    (Earley_core.Earley.iter
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.fsequence
                                                                    infix
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun
                                                                    ((s, _,
                                                                    p, pl,
                                                                    pr, ho)
                                                                    as
                                                                    _default_0)
                                                                    ->
                                                                    fun t ->
                                                                    let pl' =
                                                                    match 
                                                                    t.elt
                                                                    with
                                                                    | 
                                                                    EInfx
                                                                    (_, p) ->
                                                                    p
                                                                    | 
                                                                    _ -> 0.0 in
                                                                    let _ =
                                                                    if
                                                                    pl' > pl
                                                                    then
                                                                    give_up
                                                                    () in
                                                                    Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm I))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    let pr' =
                                                                    match 
                                                                    u.elt
                                                                    with
                                                                    | 
                                                                    EInfx
                                                                    (_, p) ->
                                                                    p
                                                                    | 
                                                                    _ -> 0.0 in
                                                                    if
                                                                    pr' > pr
                                                                    then
                                                                    give_up
                                                                    ();
                                                                    (
                                                                    let t =
                                                                    if ho
                                                                    then
                                                                    let sort
                                                                    =
                                                                    none
                                                                    (SFun
                                                                    (_st,
                                                                    (none
                                                                    (SFun
                                                                    (_st,
                                                                    _st))))) in
                                                                    in_pos
                                                                    _loc
                                                                    (EHOAp
                                                                    (s, sort,
                                                                    [t; u]))
                                                                    else
                                                                    in_pos
                                                                    _loc
                                                                    (EAppl
                                                                    ((none
                                                                    (EAppl
                                                                    (s, t))),
                                                                    u)) in
                                                                    in_pos
                                                                    _loc
                                                                    (EInfx
                                                                    (t, p)))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "{" "{")
                                                                    (Earley_core.Earley.fsequence
                                                                    (list1
                                                                    field
                                                                    semi)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "}" "}")
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun fs ->
                                                                    record
                                                                    _loc fs))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "(" "(")
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "," ",")
                                                                    (Earley_core.Earley.fsequence
                                                                    (list1
                                                                    term
                                                                    comma)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    ")" ")")
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun ts ->
                                                                    fun t ->
                                                                    tuple_term
                                                                    _loc (t
                                                                    :: ts)))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    scis
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    EScis))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm P)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm P))
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm A))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    fun t ->
                                                                    in_pos
                                                                    _loc
                                                                    (EAppl
                                                                    (t, u)))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _let_
                                                                    (Earley_core.Earley.fsequence
                                                                    v_rec
                                                                    (Earley_core.Earley.fsequence
                                                                    let_arg
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '=' '=')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm R))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    fun t ->
                                                                    fun arg
                                                                    ->
                                                                    fun r ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    let_binding
                                                                    _loc r
                                                                    arg t u))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm R))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    fun t ->
                                                                    in_pos
                                                                    _loc
                                                                    (ESequ
                                                                    (t, u))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _save_
                                                                    (Earley_core.Earley.fsequence
                                                                    llid
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun arg
                                                                    ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (EMAbs
                                                                    (arg, t))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm I)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _restore_
                                                                    (Earley_core.Earley.fsequence
                                                                    stack
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm A))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun s ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (EName
                                                                    (s, t))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm A))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "." ".")
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.alternatives
                                                                    (List.cons
                                                                    lnum
                                                                    (List.cons
                                                                    llid [])))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun l ->
                                                                    fun t ->
                                                                    in_pos
                                                                    _loc
                                                                    (EProj
                                                                    (t,
                                                                    (ref `T),
                                                                    l))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _case_
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.apply
                                                                    (fun f ->
                                                                    f [])
                                                                    (Earley_core.Earley.fixpoint'
                                                                    (fun l ->
                                                                    l)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.char
                                                                    '|' '|')))
                                                                    (Earley_core.Earley.fsequence
                                                                    patt
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    arrow
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    fun
                                                                    _default_1
                                                                    ->
                                                                    (_default_1,
                                                                    _default_0)))))))
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun ps ->
                                                                    fun t ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    pattern_matching
                                                                    _loc t ps))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _if_
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    _else_
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    _default_0))))))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun e ->
                                                                    fun t ->
                                                                    fun c ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    if_then_else
                                                                    _loc c t
                                                                    e)))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _check_
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.fsequence
                                                                    _for_
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    _because_
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    _default_0))))))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun b ->
                                                                    fun t ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    fun u ->
                                                                    fun
                                                                    _default_1
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (ERepl
                                                                    (t, u, b))))))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _delim_
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (EDelm u))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _deduce_
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.greedy
                                                                    prop)
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    deduce
                                                                    _loc a)))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _show_
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.fsequence
                                                                    _using_
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.alternatives
                                                                    (List.cons
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty
                                                                    (fun
                                                                    _default_0
                                                                    ->
                                                                    _default_0)))))
                                                                    (List.cons
                                                                    (expr
                                                                    (Trm R))
                                                                    [])))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    fun a ->
                                                                    fun
                                                                    _default_1
                                                                    ->
                                                                    show_using
                                                                    _loc a t)))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _use_
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm R))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    use _loc
                                                                    t)))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm R)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _eqns_
                                                                    (Earley_core.Earley.fsequence_position
                                                                    term
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.apply
                                                                    (fun f ->
                                                                    f [])
                                                                    (Earley_core.Earley.fixpoint'
                                                                    (fun l ->
                                                                    l)
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    equiv
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm R))
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    (Earley_core.Earley.alternatives
                                                                    (List.cons
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    _using_
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty
                                                                    (fun p ->
                                                                    p))))))
                                                                    (List.cons
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    _by_
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm R))
                                                                    (Earley_core.Earley.empty
                                                                    (fun p ->
                                                                    p)))) [])))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun p ->
                                                                    fun b ->
                                                                    (_loc, b,
                                                                    p))))))
                                                                    (fun x ->
                                                                    fun f ->
                                                                    fun l ->
                                                                    f
                                                                    (List.cons
                                                                    x l))))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun eqns
                                                                    ->
                                                                    fun str1
                                                                    ->
                                                                    fun pos1
                                                                    ->
                                                                    fun str2
                                                                    ->
                                                                    fun pos2
                                                                    ->
                                                                    fun a ->
                                                                    let _loc_a
                                                                    =
                                                                    locate
                                                                    str1 pos1
                                                                    str2 pos2 in
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    equations
                                                                    _loc
                                                                    _loc_a a
                                                                    eqns))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _showing_
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp R))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun p ->
                                                                    fun a ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    showing
                                                                    _loc a p)))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _assume_
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp R))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun p ->
                                                                    fun a ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    assume
                                                                    _loc a p)))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _know_
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Prp R))
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun p ->
                                                                    fun a ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    know _loc
                                                                    a p)))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _qed_
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    qed _loc))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm F)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _fix_
                                                                    (Earley_core.Earley.fsequence
                                                                    (Earley_core.Earley.option
                                                                    None
                                                                    (Earley_core.Earley.apply
                                                                    (fun x ->
                                                                    Some x)
                                                                    _unsafe_))
                                                                    (Earley_core.Earley.fsequence
                                                                    arg
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '{' '{')
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    '}' '}')
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun arg
                                                                    ->
                                                                    fun u ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    let 
                                                                    (a, ao) =
                                                                    arg in
                                                                    let t =
                                                                    in_pos
                                                                    _loc
                                                                    (EFixY
                                                                    ((u =
                                                                    None), a,
                                                                    t)) in
                                                                    let t =
                                                                    match ao
                                                                    with
                                                                    | 
                                                                    None -> t
                                                                    | 
                                                                    Some ty
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (ECoer
                                                                    ((new_sort_uvar
                                                                    None), t,
                                                                    ty)) in t)))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _print_
                                                                    (Earley_core.Earley.fsequence
                                                                    str_lit
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun s ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (EPrnt s))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "(" "(")
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    ":" ":")
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    ")" ")")
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun a ->
                                                                    fun t ->
                                                                    in_pos
                                                                    _loc
                                                                    (ECoer
                                                                    ((new_sort_uvar
                                                                    None), t,
                                                                    a))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _set_
                                                                    (Earley_core.Earley.fsequence
                                                                    set_param
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun t ->
                                                                    fun l ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    (EPSet
                                                                    ((new_sort_uvar
                                                                    None), l,
                                                                    t)))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm S)),
                                                                    (Earley_core.Earley.fsequence
                                                                    _let_
                                                                    (Earley_core.Earley.fsequence
                                                                    s_lst
                                                                    (Earley_core.Earley.fsequence
                                                                    _st_
                                                                    (Earley_core.Earley.fsequence
                                                                    llid_wc
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ':' ':')
                                                                    (Earley_core.Earley.fsequence
                                                                    prop
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.char
                                                                    ';' ';')
                                                                    (Earley_core.Earley.fsequence
                                                                    (expr
                                                                    (Trm S))
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun u ->
                                                                    fun a ->
                                                                    fun x ->
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    fun vs ->
                                                                    fun
                                                                    _default_1
                                                                    ->
                                                                    esuch
                                                                    _loc vs x
                                                                    a u)))))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Trm A)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "(" "(")
                                                                    (Earley_core.Earley.fsequence
                                                                    term
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    ")" ")")
                                                                    (Earley_core.Earley.empty
                                                                    (fun t ->
                                                                    match 
                                                                    t.elt
                                                                    with
                                                                    | 
                                                                    EInfx
                                                                    (t, _) ->
                                                                    t
                                                                    | 
                                                                    _ -> t))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Ord E)),
                                                                    (Earley_core.Earley.fsequence
                                                                    infty
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun
                                                                    _default_0
                                                                    ->
                                                                    in_pos
                                                                    _loc
                                                                    EConv))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Ord F)),
                                                                    (Earley_core.Earley.fsequence
                                                                    ordinal
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "+\226\130\146"
                                                                    "+\226\130\146")
                                                                    (Earley_core.Earley.fsequence
                                                                    int
                                                                    (Earley_core.Earley.empty_pos
                                                                    (fun
                                                                    __loc__start__buf
                                                                    ->
                                                                    fun
                                                                    __loc__start__pos
                                                                    ->
                                                                    fun
                                                                    __loc__end__buf
                                                                    ->
                                                                    fun
                                                                    __loc__end__pos
                                                                    ->
                                                                    let _loc
                                                                    =
                                                                    locate
                                                                    __loc__start__buf
                                                                    __loc__start__pos
                                                                    __loc__end__buf
                                                                    __loc__end__pos in
                                                                    fun n ->
                                                                    fun o ->
                                                                    in_pos
                                                                    _loc
                                                                    (ESucc
                                                                    (o, n))))))))
                                                                    (List.cons
                                                                    ((fun
                                                                    (m :
                                                                    mode) ->
                                                                    m <<=
                                                                    (Ord E)),
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    "(" "(")
                                                                    (Earley_core.Earley.fsequence
                                                                    ordinal
                                                                    (Earley_core.Earley.fsequence_ignore
                                                                    (Earley_core.Earley.string
                                                                    ")" ")")
                                                                    (Earley_core.Earley.empty
                                                                    (fun o ->
                                                                    match 
                                                                    o.elt
                                                                    with
                                                                    | 
                                                                    EInfx
                                                                    (o, _) ->
                                                                    o
                                                                    | 
                                                                    _ -> o))))))
                                                                    [])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),
      (fun (m : mode) -> []))
let _ =
  Earley_core.Earley.set_grammar ho_args
    (Earley_core.Earley.fsequence_ignore langle
       (Earley_core.Earley.fsequence (list1 any comma)
          (Earley_core.Earley.fsequence_ignore rangle
             (Earley_core.Earley.empty (fun _default_0 -> _default_0)))))
let _ =
  Earley_core.Earley.set_grammar arg_t
    (Earley_core.Earley.fsequence llid
       (Earley_core.Earley.fsequence
          (Earley_core.Earley.option None
             (Earley_core.Earley.apply (fun x -> Some x)
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.string ":" ":")
                   (Earley_core.Earley.fsequence prop
                      (Earley_core.Earley.empty (fun a -> a))))))
          (Earley_core.Earley.empty (fun ao -> fun id -> (id, ao)))))
let _ =
  Earley_core.Earley.set_grammar arg
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "(" "(")
             (Earley_core.Earley.fsequence llid_wc
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.string ":" ":")
                   (Earley_core.Earley.fsequence prop
                      (Earley_core.Earley.fsequence_ignore
                         (Earley_core.Earley.string ")" ")")
                         (Earley_core.Earley.empty
                            (fun a -> fun id -> (id, (Some a)))))))))
          (List.cons
             (Earley_core.Earley.fsequence llid_wc
                (Earley_core.Earley.empty (fun id -> (id, None)))) [])))
let _ =
  Earley_core.Earley.set_grammar field_nt
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence llid
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.char '=' '=')
                (Earley_core.Earley.fsequence arg_t
                   (Earley_core.Earley.empty (fun a -> fun l -> (l, a))))))
          (List.cons
             (Earley_core.Earley.fsequence arg_t
                (Earley_core.Earley.empty (fun a -> ((fst a), a)))) [])))
let _ =
  Earley_core.Earley.set_grammar let_arg
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.char '(' '(')
             (Earley_core.Earley.fsequence arg_t
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.char ',' ',')
                   (Earley_core.Earley.fsequence (list1 arg_t comma)
                      (Earley_core.Earley.fsequence_ignore
                         (Earley_core.Earley.char ')' ')')
                         (Earley_core.Earley.empty
                            (fun fs -> fun f -> `LetArgTup (f :: fs))))))))
          (List.cons
             (Earley_core.Earley.fsequence llid_wc
                (Earley_core.Earley.fsequence
                   (Earley_core.Earley.option None
                      (Earley_core.Earley.apply (fun x -> Some x)
                         (Earley_core.Earley.fsequence_ignore
                            (Earley_core.Earley.char ':' ':')
                            (Earley_core.Earley.fsequence prop
                               (Earley_core.Earley.empty (fun a -> a))))))
                   (Earley_core.Earley.empty
                      (fun ao -> fun id -> `LetArgVar (id, ao)))))
             (List.cons
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.char '{' '{')
                   (Earley_core.Earley.fsequence (list1 field_nt semi)
                      (Earley_core.Earley.fsequence_ignore
                         (Earley_core.Earley.char '}' '}')
                         (Earley_core.Earley.empty (fun fs -> `LetArgRec fs)))))
                []))))
let _ =
  Earley_core.Earley.set_grammar field
    (Earley_core.Earley.fsequence llid
       (Earley_core.Earley.fsequence
          (Earley_core.Earley.option None
             (Earley_core.Earley.apply (fun x -> Some x)
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.string "=" "=")
                   (Earley_core.Earley.fsequence (expr (Trm R))
                      (Earley_core.Earley.empty (fun t -> t))))))
          (Earley_core.Earley.empty
             (fun _default_0 -> fun l -> (l, _default_0)))))
let _ =
  Earley_core.Earley.set_grammar patt
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "0" "0")
             (Earley_core.Earley.empty_pos
                (fun __loc__start__buf ->
                   fun __loc__start__pos ->
                     fun __loc__end__buf ->
                       fun __loc__end__pos ->
                         let _loc =
                           locate __loc__start__buf __loc__start__pos
                             __loc__end__buf __loc__end__pos in
                         ((in_pos _loc "Zero"), None))))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.char '[' '[')
                (Earley_core.Earley.fsequence_ignore
                   (Earley_core.Earley.char ']' ']')
                   (Earley_core.Earley.empty_pos
                      (fun __loc__start__buf ->
                         fun __loc__start__pos ->
                           fun __loc__end__buf ->
                             fun __loc__end__pos ->
                               let _loc =
                                 locate __loc__start__buf __loc__start__pos
                                   __loc__end__buf __loc__end__pos in
                               ((in_pos _loc "Nil"), None)))))
             (List.cons
                (Earley_core.Earley.fsequence llid_wc
                   (Earley_core.Earley.fsequence_ignore
                      (Earley_core.Earley.string "::" "::")
                      (Earley_core.Earley.fsequence llid_wc
                         (Earley_core.Earley.empty_pos
                            (fun __loc__start__buf ->
                               fun __loc__start__pos ->
                                 fun __loc__end__buf ->
                                   fun __loc__end__pos ->
                                     let _loc =
                                       locate __loc__start__buf
                                         __loc__start__pos __loc__end__buf
                                         __loc__end__pos in
                                     fun y ->
                                       fun x ->
                                         let fs =
                                           if y.elt <> "_"
                                           then
                                             [((Pos.none "tl"), (y, None))]
                                           else [] in
                                         let fs =
                                           if x.elt <> "_"
                                           then ((Pos.none "hd"), (x, None))
                                             :: fs
                                           else fs in
                                         ((in_pos _loc "Cons"),
                                           (Some (`LetArgRec fs))))))))
                (List.cons
                   (Earley_core.Earley.fsequence luid
                      (Earley_core.Earley.fsequence
                         (Earley_core.Earley.option None
                            (Earley_core.Earley.apply (fun x -> Some x)
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.char '[' '[')
                                  (Earley_core.Earley.fsequence let_arg
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.char ']' ']')
                                        (Earley_core.Earley.empty
                                           (fun _default_0 -> _default_0)))))))
                         (Earley_core.Earley.empty
                            (fun arg -> fun c -> (c, arg))))) [])))))
let _ =
  Earley_core.Earley.set_grammar set_param
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence_ignore
             (Earley_core.Earley.string "log" "log")
             (Earley_core.Earley.fsequence str_lit
                (Earley_core.Earley.empty (fun s -> Ast.Logs s))))
          (List.cons
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.string "auto" "auto")
                (Earley_core.Earley.fsequence int
                   (Earley_core.Earley.fsequence int
                      (Earley_core.Earley.empty
                         (fun d -> fun b -> Ast.Alvl (b, d)))))) [])))
let toplevel = Earley_core.Earley.declare_grammar "toplevel"
let entry = Earley_core.Earley.declare_grammar "entry"
let rec interpret : bool -> Raw.toplevel -> unit =
  fun nodep ->
    fun top ->
      let verbose = (!verbose) && nodep in
      let open Env in
        match top with
        | Sort_def (id, s) ->
            let Ast.Sort s = unsugar_sort s in
            (if verbose
             then out "sort %s \226\137\148 %a\n%!" id.elt Print.sort s;
             add_sort id.elt s)
        | Expr_def (id, s, e) ->
            let Box (s, e) = unsugar_expr e s in
            let ee = Bindlib.unbox e in
            (if verbose
             then
               out "expr %s : %a \226\137\148 %a\n%!" id.elt Print.sort s
                 Print.ex ee;
             add_expr id s e)
        | Valu_def (id, a, t) ->
            let a = unbox (to_prop (unsugar_expr a _sp)) in
            let t = unbox (to_term (unsugar_expr t _st)) in
            let (a, prf) = type_check t a in
            let v = Eval.eval (Erase.term_erasure t) in
            (if verbose then out "val %s : %a\n%!" id.elt Print.ex a;
             ignore prf;
             add_value id t a v)
        | Chck_sub (a, n, b) ->
            let a = unbox (to_prop (unsugar_expr a _sp)) in
            let b = unbox (to_prop (unsugar_expr b _sp)) in
            (if (is_subtype a b) <> n then raise (Check_failed (a, n, b));
             if verbose
             then
               (let (l, r) = if n then ("", "") else ("\194\172(", ")") in
                out "showed %s%a \226\138\130 %a%s\n%!" l Print.ex a Print.ex
                  b r))
        | Include fn ->
            (if verbose then out "include %S\n%!" fn;
             Log.without (handle_file false) fn)
        | Def_list tops -> List.iter (interpret nodep) tops
        | Glbl_set l ->
            let open Ast in
              (match l with
               | Alvl (b, d) -> Typing.default_auto_lvl := (b, d)
               | Logs s -> Log.set_enabled s)
        | Infix (sym, infix) -> add_infix sym infix
and load_infix fn =
  try Env.load_infix fn
  with
  | Env.Compile ->
      (compile_file false fn;
       (try Env.load_infix fn
        with | Env.Compile -> failwith "source changed during compilation"))
and compile_file : bool -> string -> unit =
  fun nodep ->
    fun fn ->
      if !verbose then out "[%s]\n%!" fn;
      Env.start fn;
      (let save = !Env.env in
       Env.env := Env.empty;
       (let ast = Chrono.add_time parsing_chrono parse_file fn in
        List.iter (interpret nodep) ast; Env.save_file fn; Env.env := save))
and handle_file nodep fn =
  try
    if (!recompile) && nodep then compile_file nodep fn;
    (try Env.load_file fn
     with
     | Env.Compile ->
         if nodep
         then
           (compile_file nodep fn;
            (try Env.load_file fn
             with
             | Env.Compile -> failwith "source changed during compilation"))
         else failwith "source changed during compilation")
  with
  | No_parse p ->
      (err_msg "No parse %a." Pos.print_short_pos p;
       Quote.quote_file stderr p;
       exit 1)
  | Unbound_sort (s, None) -> (err_msg "Unbound sort %s." s; exit 1)
  | Unbound_sort (s, Some p) ->
      (err_msg "Unbound sort %s (%a)." s Pos.print_short_pos p;
       Quote.quote_file stderr p;
       exit 1)
  | Sort_clash (t, s) ->
      let _ =
        match t.pos with
        | None ->
            err_msg "Sort %a expected for %a." pretty_print_raw_sort s
              print_raw_expr t
        | Some p ->
            (err_msg "Sort %a expected %a." pretty_print_raw_sort s
               Pos.print_short_pos p;
             Quote.quote_file stderr p) in
      exit 1
  | Too_many_args e ->
      let _ =
        match e.pos with
        | None -> err_msg "Expr %a has too many arguments." print_raw_expr e
        | Some p ->
            (err_msg "Expr %a has too many arguments." print_raw_expr e;
             Quote.quote_file stderr p) in
      exit 1
  | Unbound_variable (x, p) ->
      let _ =
        match p with
        | None -> err_msg "Unbound variable %s." x
        | Some p ->
            (err_msg "Unbound variable %s %a." x Pos.print_short_pos p;
             Quote.quote_file stderr p) in
      exit 1
  | Already_matched c ->
      ((match c.pos with
        | None -> err_msg "%s has already been matched." c.elt
        | Some p ->
            (err_msg "%s (%a) has already been matched." c.elt
               Pos.print_short_pos p;
             Quote.quote_file stderr p));
       exit 1)
and parse_file : string -> toplevel list =
  fun fn ->
    let blank = Blanks.line_comments "//" in
    let parse = Earley.parse_file entry blank in
    try List.map (fun act -> act ()) (parse fn)
    with
    | Parse_error (buf, pos) ->
        let pos = Pos.locate buf pos buf pos in raise (No_parse pos)[@@ocaml.doc
                                                                    " Main parsing function taking as input a file name. "]
let _ =
  Earley_core.Earley.set_grammar toplevel
    (Earley_core.Earley.alternatives
       (List.cons
          (Earley_core.Earley.fsequence _infix_
             (Earley_core.Earley.fsequence_ignore
                (Earley_core.Earley.char '(' '(')
                (Earley_core.Earley.fsequence infix_re
                   (Earley_core.Earley.fsequence_ignore
                      (Earley_core.Earley.char ')' ')')
                      (Earley_core.Earley.fsequence_ignore
                         (Earley_core.Earley.char '=' '=')
                         (Earley_core.Earley.fsequence lid
                            (Earley_core.Earley.fsequence
                               (Earley_core.Earley.option false
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.string
                                        "\226\159\168" "\226\159\168")
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.string
                                           "\226\159\169" "\226\159\169")
                                        (Earley_core.Earley.empty true))))
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.string "priority"
                                     "priority")
                                  (Earley_core.Earley.fsequence float
                                     (Earley_core.Earley.fsequence
                                        (Earley_core.Earley.alternatives
                                           (List.cons
                                              (Earley_core.Earley.fsequence_ignore
                                                 (Earley_core.Earley.string
                                                    "non" "non")
                                                 (Earley_core.Earley.empty
                                                    Env.NonAssoc))
                                              (List.cons
                                                 (Earley_core.Earley.fsequence_ignore
                                                    (Earley_core.Earley.string
                                                       "left" "left")
                                                    (Earley_core.Earley.empty
                                                       Env.LeftAssoc))
                                                 (List.cons
                                                    (Earley_core.Earley.fsequence_ignore
                                                       (Earley_core.Earley.string
                                                          "right" "right")
                                                       (Earley_core.Earley.empty
                                                          Env.RightAssoc)) []))))
                                        (Earley_core.Earley.fsequence_ignore
                                           (Earley_core.Earley.string
                                              "associative" "associative")
                                           (Earley_core.Earley.empty
                                              (fun asso ->
                                                 fun prio ->
                                                   fun hiho ->
                                                     fun name ->
                                                       fun s ->
                                                         fun _default_0 ->
                                                           let infix =
                                                             let open Env in
                                                               {
                                                                 name;
                                                                 prio;
                                                                 asso;
                                                                 hiho
                                                               } in
                                                           Hashtbl.replace
                                                             Env.infix_tbl s
                                                             infix;
                                                           (fun () ->
                                                              Infix
                                                                (s, infix)))))))))))))))
          (List.cons
             (Earley_core.Earley.fsequence _sort_
                (Earley_core.Earley.fsequence llid
                   (Earley_core.Earley.fsequence_ignore
                      (Earley_core.Earley.char '=' '=')
                      (Earley_core.Earley.fsequence sort
                         (Earley_core.Earley.empty
                            (fun s ->
                               fun id ->
                                 fun _default_0 -> fun () -> sort_def id s))))))
             (List.cons
                (Earley_core.Earley.fsequence _def_
                   (Earley_core.Earley.fsequence llid
                      (Earley_core.Earley.fsequence s_args
                         (Earley_core.Earley.fsequence
                            (Earley_core.Earley.option None
                               (Earley_core.Earley.apply (fun x -> Some x)
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.char ':' ':')
                                     (Earley_core.Earley.fsequence sort
                                        (Earley_core.Earley.empty
                                           (fun _default_0 -> _default_0))))))
                            (Earley_core.Earley.fsequence_ignore
                               (Earley_core.Earley.char '=' '=')
                               (Earley_core.Earley.fsequence any
                                  (Earley_core.Earley.empty
                                     (fun e ->
                                        fun s ->
                                          fun args ->
                                            fun id ->
                                              fun _default_0 ->
                                                fun () ->
                                                  expr_def id args s e))))))))
                (List.cons
                   (Earley_core.Earley.fsequence _type_
                      (Earley_core.Earley.fsequence t_rec
                         (Earley_core.Earley.fsequence llid
                            (Earley_core.Earley.fsequence s_args
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.char '=' '=')
                                  (Earley_core.Earley.fsequence prop
                                     (Earley_core.Earley.empty_pos
                                        (fun __loc__start__buf ->
                                           fun __loc__start__pos ->
                                             fun __loc__end__buf ->
                                               fun __loc__end__pos ->
                                                 let _loc =
                                                   locate __loc__start__buf
                                                     __loc__start__pos
                                                     __loc__end__buf
                                                     __loc__end__pos in
                                                 fun e ->
                                                   fun args ->
                                                     fun id ->
                                                       fun r ->
                                                         fun _default_0 ->
                                                           fun () ->
                                                             type_def _loc r
                                                               id args e))))))))
                   (List.cons
                      (Earley_core.Earley.fsequence _val_
                         (Earley_core.Earley.fsequence v_rec
                            (Earley_core.Earley.fsequence llid
                               (Earley_core.Earley.fsequence_ignore
                                  (Earley_core.Earley.char ':' ':')
                                  (Earley_core.Earley.fsequence prop
                                     (Earley_core.Earley.fsequence_ignore
                                        (Earley_core.Earley.char '=' '=')
                                        (Earley_core.Earley.fsequence term
                                           (Earley_core.Earley.empty
                                              (fun t ->
                                                 fun a ->
                                                   fun id ->
                                                     fun r ->
                                                       fun _default_0 ->
                                                         fun () ->
                                                           val_def r id a t)))))))))
                      (List.cons
                         (Earley_core.Earley.fsequence _assert_
                            (Earley_core.Earley.fsequence neg
                               (Earley_core.Earley.fsequence prop
                                  (Earley_core.Earley.fsequence_ignore
                                     (Earley_core.Earley.string
                                        "\226\138\130" "\226\138\130")
                                     (Earley_core.Earley.fsequence prop
                                        (Earley_core.Earley.empty
                                           (fun b ->
                                              fun a ->
                                                fun r ->
                                                  fun _default_0 ->
                                                    fun () -> check_sub a r b)))))))
                         (List.cons
                            (Earley_core.Earley.fsequence _include_
                               (Earley_core.Earley.fsequence path
                                  (Earley_core.Earley.empty
                                     (fun p ->
                                        fun _default_0 ->
                                          let fn = Env.find_module p in
                                          load_infix fn;
                                          (fun () -> Include fn)))))
                            (List.cons
                               (Earley_core.Earley.fsequence _set_
                                  (Earley_core.Earley.fsequence set_param
                                     (Earley_core.Earley.empty
                                        (fun l ->
                                           fun _default_0 ->
                                             fun () -> Glbl_set l)))) [])))))))))
let _ =
  Earley_core.Earley.set_grammar entry
    (Earley_core.Earley.apply (fun f -> f [])
       (Earley_core.Earley.fixpoint' (fun l -> l) toplevel
          (fun x -> fun f -> fun l -> f (List.cons x l))))
